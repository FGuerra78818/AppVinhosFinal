// <auto-generated />
using System;
using AppVinhosFinal.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AppVinhosFinal.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250717121013_f2")]
    partial class f2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AppVinhosFinal.Entities.UserAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("MustChangePassword")
                        .HasColumnType("bit");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("QuintaId")
                        .HasColumnType("int");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("QuintaId");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9a10a750-9f9f-42ab-b00f-7a92faf04ef3",
                            CreatedAt = new DateTime(2025, 7, 11, 7, 0, 0, 0, DateTimeKind.Utc),
                            Email = "admin@vinhos.pt",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            MustChangePassword = false,
                            NormalizedEmail = "ADMIN@VINHOS.PT",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEJ87f7T0vBoBQgP8jzbb+hu9CJTfIu5nO9HAS4n/r3EqRc+2k2FpfjxSqQp1oHRi3A==",
                            PhoneNumberConfirmed = false,
                            Role = "Admin",
                            SecurityStamp = "8084b8d8-cd11-4b1a-af5e-d169424185c7",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8653afc0-365d-44af-adb4-24151f10d7ca",
                            CreatedAt = new DateTime(2025, 7, 11, 8, 0, 0, 0, DateTimeKind.Utc),
                            Email = "staff01@vinhos.pt",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            MustChangePassword = false,
                            NormalizedEmail = "STAFF01@VINHOS.PT",
                            NormalizedUserName = "STAFF01",
                            PasswordHash = "AQAAAAIAAYagAAAAEMbSdO+ysIaL3e74MfMtTiy4wNFwefF8/yIcwIIHxqGFKJ3xYEsyI5moYThpH4N8sg==",
                            PhoneNumberConfirmed = false,
                            Role = "Staff",
                            SecurityStamp = "586ac775-dc99-49ee-b1f7-cd11f94313c3",
                            TwoFactorEnabled = false,
                            UserName = "staff01"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "77eb8aa5-a637-41b3-a462-0b90556b88d2",
                            CreatedAt = new DateTime(2025, 7, 11, 9, 0, 0, 0, DateTimeKind.Utc),
                            Email = "visit1@vinhos.pt",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            MustChangePassword = true,
                            NormalizedEmail = "VISIT1@VINHOS.PT",
                            NormalizedUserName = "VISITANTE1",
                            PasswordHash = "AQAAAAIAAYagAAAAEHJAFgEWseqm91GP6JERHuEZgYSO9g0Y796J4EhhOcmdNGgrmC3n7D4jMI0PfD0WIg==",
                            PhoneNumberConfirmed = false,
                            QuintaId = 2,
                            Role = "User",
                            SecurityStamp = "ae7c6076-5a6d-46cf-a53e-0fc9019f0f20",
                            TwoFactorEnabled = false,
                            UserName = "visitante1"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "620069c3-00b1-4883-956a-2419cfd027e3",
                            CreatedAt = new DateTime(2025, 7, 10, 14, 30, 0, 0, DateTimeKind.Utc),
                            Email = "user01@vinhos.pt",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            MustChangePassword = false,
                            NormalizedEmail = "USER01@VINHOS.PT",
                            NormalizedUserName = "USER01",
                            PasswordHash = "AQAAAAIAAYagAAAAEESbjKcLfjs1l04lUpNjHAGZsW6UryIFPpWboyW+5xvc3dcHtfp6On3+9zE5eLm36g==",
                            PhoneNumberConfirmed = false,
                            QuintaId = 1,
                            Role = "User",
                            SecurityStamp = "03de34cc-b48c-4550-a451-3e5356a3ce66",
                            TwoFactorEnabled = false,
                            UserName = "user01"
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "11df1678-e026-4ad8-993e-ae09f3929b23",
                            CreatedAt = new DateTime(2025, 7, 10, 16, 45, 0, 0, DateTimeKind.Utc),
                            Email = "convid@vinhos.pt",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            MustChangePassword = false,
                            NormalizedEmail = "CONVID@VINHOS.PT",
                            NormalizedUserName = "CONVIDADO",
                            PasswordHash = "AQAAAAIAAYagAAAAEO2T0PlxnwJc5sGHqyahSRlR+E06W84dNR9SMMDgDysuMK6d8MRoOhGKAW3tp2wYUg==",
                            PhoneNumberConfirmed = false,
                            QuintaId = 5,
                            Role = "User",
                            SecurityStamp = "b741c082-e69c-4930-8cc6-87df84d1724b",
                            TwoFactorEnabled = false,
                            UserName = "convidado"
                        },
                        new
                        {
                            Id = 6,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "29c1584f-9f11-4c6b-b6c3-5ffc2ea8bc2b",
                            CreatedAt = new DateTime(2025, 7, 9, 12, 20, 0, 0, DateTimeKind.Utc),
                            Email = "guest2@vinhos.pt",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            MustChangePassword = true,
                            NormalizedEmail = "GUEST2@VINHOS.PT",
                            NormalizedUserName = "GUEST2",
                            PasswordHash = "AQAAAAIAAYagAAAAEO7M8yS/6bLcctRf+0p3vbvB+itNF+fmItz6CweYWsHSEqnykEOuSphzFrRvaUj4PA==",
                            PhoneNumberConfirmed = false,
                            QuintaId = 6,
                            Role = "User",
                            SecurityStamp = "1cc6ab5c-5e3e-4dce-92d4-c22b6c2a018b",
                            TwoFactorEnabled = false,
                            UserName = "guest2"
                        });
                });

            modelBuilder.Entity("AppVinhosFinal.Models.LogsCopos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comprador")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DataHoraVenda")
                        .HasColumnType("datetime2");

                    b.Property<int>("QuantidadeVendida")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("LogsCopos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Comprador = "Cliente X",
                            DataHoraVenda = new DateTime(2025, 7, 11, 10, 15, 0, 0, DateTimeKind.Unspecified),
                            QuantidadeVendida = 12
                        },
                        new
                        {
                            Id = 2,
                            DataHoraVenda = new DateTime(2025, 7, 11, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            QuantidadeVendida = 8
                        },
                        new
                        {
                            Id = 3,
                            Comprador = "Cliente Y",
                            DataHoraVenda = new DateTime(2025, 7, 10, 18, 30, 0, 0, DateTimeKind.Unspecified),
                            QuantidadeVendida = 25
                        },
                        new
                        {
                            Id = 4,
                            Comprador = "Cliente Z",
                            DataHoraVenda = new DateTime(2025, 7, 9, 20, 45, 0, 0, DateTimeKind.Unspecified),
                            QuantidadeVendida = 5
                        },
                        new
                        {
                            Id = 5,
                            Comprador = "Cliente W",
                            DataHoraVenda = new DateTime(2025, 7, 9, 19, 20, 0, 0, DateTimeKind.Unspecified),
                            QuantidadeVendida = 18
                        },
                        new
                        {
                            Id = 6,
                            Comprador = "Sem Venda",
                            DataHoraVenda = new DateTime(2025, 7, 8, 17, 10, 0, 0, DateTimeKind.Unspecified),
                            QuantidadeVendida = 0
                        },
                        new
                        {
                            Id = 7,
                            DataHoraVenda = new DateTime(2025, 7, 7, 16, 5, 0, 0, DateTimeKind.Unspecified),
                            QuantidadeVendida = 50
                        },
                        new
                        {
                            Id = 8,
                            Comprador = "Cliente K",
                            DataHoraVenda = new DateTime(2025, 7, 6, 21, 30, 0, 0, DateTimeKind.Unspecified),
                            QuantidadeVendida = 7
                        });
                });

            modelBuilder.Entity("AppVinhosFinal.Models.PedidoVinho", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("IdPedido")
                        .HasColumnType("int");

                    b.Property<int>("IdVinho")
                        .HasColumnType("int");

                    b.Property<int>("Quantidade")
                        .HasColumnType("int");

                    b.Property<int>("Tipo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdPedido");

                    b.HasIndex("IdVinho");

                    b.ToTable("PedidoVinhos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IdPedido = 1,
                            IdVinho = 1,
                            Quantidade = 5,
                            Tipo = 0
                        },
                        new
                        {
                            Id = 2,
                            IdPedido = 2,
                            IdVinho = 2,
                            Quantidade = 3,
                            Tipo = 0
                        },
                        new
                        {
                            Id = 3,
                            IdPedido = 2,
                            IdVinho = 4,
                            Quantidade = 2,
                            Tipo = 0
                        },
                        new
                        {
                            Id = 4,
                            IdPedido = 3,
                            IdVinho = 9,
                            Quantidade = 10,
                            Tipo = 0
                        },
                        new
                        {
                            Id = 5,
                            IdPedido = 4,
                            IdVinho = 10,
                            Quantidade = 15,
                            Tipo = 0
                        },
                        new
                        {
                            Id = 6,
                            IdPedido = 4,
                            IdVinho = 12,
                            Quantidade = 5,
                            Tipo = 0
                        },
                        new
                        {
                            Id = 7,
                            IdPedido = 6,
                            IdVinho = 13,
                            Quantidade = 2,
                            Tipo = 0
                        },
                        new
                        {
                            Id = 8,
                            IdPedido = 6,
                            IdVinho = 13,
                            Quantidade = 3,
                            Tipo = 0
                        },
                        new
                        {
                            Id = 9,
                            IdPedido = 7,
                            IdVinho = 17,
                            Quantidade = 5,
                            Tipo = 0
                        },
                        new
                        {
                            Id = 10,
                            IdPedido = 7,
                            IdVinho = 19,
                            Quantidade = 4,
                            Tipo = 0
                        },
                        new
                        {
                            Id = 11,
                            IdPedido = 8,
                            IdVinho = 21,
                            Quantidade = 6,
                            Tipo = 0
                        },
                        new
                        {
                            Id = 12,
                            IdPedido = 9,
                            IdVinho = 22,
                            Quantidade = 8,
                            Tipo = 0
                        },
                        new
                        {
                            Id = 13,
                            IdPedido = 9,
                            IdVinho = 23,
                            Quantidade = 2,
                            Tipo = 0
                        },
                        new
                        {
                            Id = 14,
                            IdPedido = 9,
                            IdVinho = 24,
                            Quantidade = 1,
                            Tipo = 0
                        },
                        new
                        {
                            Id = 15,
                            IdPedido = 10,
                            IdVinho = 5,
                            Quantidade = 7,
                            Tipo = 0
                        },
                        new
                        {
                            Id = 16,
                            IdPedido = 10,
                            IdVinho = 6,
                            Quantidade = 3,
                            Tipo = 0
                        },
                        new
                        {
                            Id = 17,
                            IdPedido = 10,
                            IdVinho = 7,
                            Quantidade = 1,
                            Tipo = 0
                        },
                        new
                        {
                            Id = 18,
                            IdPedido = 11,
                            IdVinho = 12,
                            Quantidade = 0,
                            Tipo = 0
                        },
                        new
                        {
                            Id = 19,
                            IdPedido = 12,
                            IdVinho = 3,
                            Quantidade = 10,
                            Tipo = 0
                        },
                        new
                        {
                            Id = 20,
                            IdPedido = 12,
                            IdVinho = 1,
                            Quantidade = 2,
                            Tipo = 0
                        });
                });

            modelBuilder.Entity("AppVinhosFinal.Models.Pedidos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DataAprovacao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataPedido")
                        .HasColumnType("datetime2");

                    b.Property<int>("Estado")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Pedidos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DataPedido = new DateTime(2025, 7, 11, 8, 0, 0, 0, DateTimeKind.Utc),
                            Estado = 0
                        },
                        new
                        {
                            Id = 2,
                            DataAprovacao = new DateTime(2025, 7, 11, 9, 35, 0, 0, DateTimeKind.Utc),
                            DataPedido = new DateTime(2025, 7, 11, 9, 30, 0, 0, DateTimeKind.Utc),
                            Estado = 1
                        },
                        new
                        {
                            Id = 3,
                            DataPedido = new DateTime(2025, 7, 10, 14, 0, 0, 0, DateTimeKind.Utc),
                            Estado = 2
                        },
                        new
                        {
                            Id = 4,
                            DataAprovacao = new DateTime(2025, 7, 11, 16, 10, 0, 0, DateTimeKind.Utc),
                            DataPedido = new DateTime(2025, 7, 10, 16, 5, 0, 0, DateTimeKind.Utc),
                            Estado = 1
                        },
                        new
                        {
                            Id = 5,
                            DataPedido = new DateTime(2025, 7, 10, 18, 20, 0, 0, DateTimeKind.Utc),
                            Estado = 0
                        },
                        new
                        {
                            Id = 6,
                            DataAprovacao = new DateTime(2025, 7, 10, 10, 17, 0, 0, DateTimeKind.Utc),
                            DataPedido = new DateTime(2025, 7, 9, 10, 15, 0, 0, DateTimeKind.Utc),
                            Estado = 1
                        },
                        new
                        {
                            Id = 7,
                            DataPedido = new DateTime(2025, 7, 9, 12, 45, 0, 0, DateTimeKind.Utc),
                            Estado = 0
                        },
                        new
                        {
                            Id = 8,
                            DataPedido = new DateTime(2025, 7, 8, 14, 0, 0, 0, DateTimeKind.Utc),
                            Estado = 2
                        },
                        new
                        {
                            Id = 9,
                            DataAprovacao = new DateTime(2025, 7, 9, 16, 35, 0, 0, DateTimeKind.Utc),
                            DataPedido = new DateTime(2025, 7, 8, 16, 30, 0, 0, DateTimeKind.Utc),
                            Estado = 1
                        },
                        new
                        {
                            Id = 10,
                            DataPedido = new DateTime(2025, 7, 7, 11, 15, 0, 0, DateTimeKind.Utc),
                            Estado = 0
                        },
                        new
                        {
                            Id = 11,
                            DataPedido = new DateTime(2025, 7, 7, 13, 25, 0, 0, DateTimeKind.Utc),
                            Estado = 2
                        },
                        new
                        {
                            Id = 12,
                            DataAprovacao = new DateTime(2025, 7, 7, 15, 50, 0, 0, DateTimeKind.Utc),
                            DataPedido = new DateTime(2025, 7, 6, 15, 45, 0, 0, DateTimeKind.Utc),
                            Estado = 1
                        });
                });

            modelBuilder.Entity("AppVinhosFinal.Models.Quintas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("NumeroMaxVinhoFrio")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Nome")
                        .IsUnique();

                    b.ToTable("Quintas");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nome = "Quinta Modelo",
                            NumeroMaxVinhoFrio = 20
                        },
                        new
                        {
                            Id = 2,
                            Nome = "Quinta Vazia",
                            NumeroMaxVinhoFrio = 0
                        },
                        new
                        {
                            Id = 3,
                            Nome = "Quinta dos Sonhos",
                            NumeroMaxVinhoFrio = 50
                        },
                        new
                        {
                            Id = 4,
                            Nome = "Vinhedo Real",
                            NumeroMaxVinhoFrio = 30
                        },
                        new
                        {
                            Id = 5,
                            Nome = "Encostas do Douro",
                            NumeroMaxVinhoFrio = 40
                        },
                        new
                        {
                            Id = 6,
                            Nome = "Vale do Champagne",
                            NumeroMaxVinhoFrio = 60
                        });
                });

            modelBuilder.Entity("AppVinhosFinal.Models.Vinhos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CapacidadeFria")
                        .HasColumnType("int");

                    b.Property<int>("Estado")
                        .HasColumnType("int");

                    b.Property<int>("IdQuinta")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Quantidade")
                        .HasColumnType("int");

                    b.Property<int>("QuantidadeFria")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdQuinta");

                    b.ToTable("Vinhos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CapacidadeFria = 10,
                            Estado = 0,
                            IdQuinta = 1,
                            Nome = "Tinto Clássico",
                            Quantidade = 50,
                            QuantidadeFria = 10
                        },
                        new
                        {
                            Id = 2,
                            CapacidadeFria = 5,
                            Estado = 0,
                            IdQuinta = 1,
                            Nome = "Branco Seco",
                            Quantidade = 40,
                            QuantidadeFria = 5
                        },
                        new
                        {
                            Id = 3,
                            CapacidadeFria = 20,
                            Estado = 0,
                            IdQuinta = 1,
                            Nome = "Rosé Alegre",
                            Quantidade = 60,
                            QuantidadeFria = 20
                        },
                        new
                        {
                            Id = 4,
                            CapacidadeFria = 30,
                            Estado = 0,
                            IdQuinta = 1,
                            Nome = "Espumante Delicado",
                            Quantidade = 30,
                            QuantidadeFria = 30
                        },
                        new
                        {
                            Id = 5,
                            CapacidadeFria = 0,
                            Estado = 0,
                            IdQuinta = 2,
                            Nome = "Tinto Intenso II",
                            Quantidade = 45,
                            QuantidadeFria = 0
                        },
                        new
                        {
                            Id = 6,
                            CapacidadeFria = 25,
                            Estado = 0,
                            IdQuinta = 2,
                            Nome = "Branco Floral",
                            Quantidade = 25,
                            QuantidadeFria = 25
                        },
                        new
                        {
                            Id = 7,
                            CapacidadeFria = 35,
                            Estado = 0,
                            IdQuinta = 2,
                            Nome = "Rosé de Verão",
                            Quantidade = 70,
                            QuantidadeFria = 35
                        },
                        new
                        {
                            Id = 8,
                            CapacidadeFria = 50,
                            Estado = 1,
                            IdQuinta = 2,
                            Nome = "Espumante Brut",
                            Quantidade = 80,
                            QuantidadeFria = 50
                        },
                        new
                        {
                            Id = 9,
                            CapacidadeFria = 15,
                            Estado = 0,
                            IdQuinta = 3,
                            Nome = "Tinto Reserva",
                            Quantidade = 75,
                            QuantidadeFria = 15
                        },
                        new
                        {
                            Id = 10,
                            CapacidadeFria = 45,
                            Estado = 0,
                            IdQuinta = 3,
                            Nome = "Branco Suave",
                            Quantidade = 90,
                            QuantidadeFria = 45
                        },
                        new
                        {
                            Id = 11,
                            CapacidadeFria = 60,
                            Estado = 0,
                            IdQuinta = 3,
                            Nome = "Rosé Primavera",
                            Quantidade = 100,
                            QuantidadeFria = 60
                        },
                        new
                        {
                            Id = 12,
                            CapacidadeFria = 50,
                            Estado = 0,
                            IdQuinta = 3,
                            Nome = "Espumante Rosé",
                            Quantidade = 50,
                            QuantidadeFria = 50
                        },
                        new
                        {
                            Id = 13,
                            CapacidadeFria = 20,
                            Estado = 0,
                            IdQuinta = 4,
                            Nome = "Tinto Envelhecido",
                            Quantidade = 40,
                            QuantidadeFria = 20
                        },
                        new
                        {
                            Id = 14,
                            CapacidadeFria = 30,
                            Estado = 0,
                            IdQuinta = 4,
                            Nome = "Branco Cítrico",
                            Quantidade = 60,
                            QuantidadeFria = 30
                        },
                        new
                        {
                            Id = 15,
                            CapacidadeFria = 25,
                            Estado = 1,
                            IdQuinta = 4,
                            Nome = "Rosé Aromático",
                            Quantidade = 55,
                            QuantidadeFria = 25
                        },
                        new
                        {
                            Id = 16,
                            CapacidadeFria = 80,
                            Estado = 0,
                            IdQuinta = 4,
                            Nome = "Espumante Premium",
                            Quantidade = 80,
                            QuantidadeFria = 80
                        },
                        new
                        {
                            Id = 17,
                            CapacidadeFria = 35,
                            Estado = 0,
                            IdQuinta = 5,
                            Nome = "Tinto Ensolarado",
                            Quantidade = 65,
                            QuantidadeFria = 35
                        },
                        new
                        {
                            Id = 18,
                            CapacidadeFria = 70,
                            Estado = 0,
                            IdQuinta = 5,
                            Nome = "Branco Seco Especial",
                            Quantidade = 110,
                            QuantidadeFria = 70
                        },
                        new
                        {
                            Id = 19,
                            CapacidadeFria = 45,
                            Estado = 0,
                            IdQuinta = 5,
                            Nome = "Rosé Tropical",
                            Quantidade = 85,
                            QuantidadeFria = 45
                        },
                        new
                        {
                            Id = 20,
                            CapacidadeFria = 60,
                            Estado = 0,
                            IdQuinta = 5,
                            Nome = "Espumante de Honra",
                            Quantidade = 90,
                            QuantidadeFria = 60
                        },
                        new
                        {
                            Id = 21,
                            CapacidadeFria = 40,
                            Estado = 0,
                            IdQuinta = 6,
                            Nome = "Tinto Forte",
                            Quantidade = 80,
                            QuantidadeFria = 40
                        },
                        new
                        {
                            Id = 22,
                            CapacidadeFria = 50,
                            Estado = 0,
                            IdQuinta = 6,
                            Nome = "Branco Frutado",
                            Quantidade = 95,
                            QuantidadeFria = 50
                        },
                        new
                        {
                            Id = 23,
                            CapacidadeFria = 60,
                            Estado = 0,
                            IdQuinta = 6,
                            Nome = "Rosé Encantado",
                            Quantidade = 120,
                            QuantidadeFria = 60
                        },
                        new
                        {
                            Id = 24,
                            CapacidadeFria = 80,
                            Estado = 0,
                            IdQuinta = 6,
                            Nome = "Espumante Real",
                            Quantidade = 100,
                            QuantidadeFria = 80
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("AppVinhosFinal.Entities.UserAccount", b =>
                {
                    b.HasOne("AppVinhosFinal.Models.Quintas", "Quinta")
                        .WithMany("UserAccounts")
                        .HasForeignKey("QuintaId");

                    b.Navigation("Quinta");
                });

            modelBuilder.Entity("AppVinhosFinal.Models.PedidoVinho", b =>
                {
                    b.HasOne("AppVinhosFinal.Models.Pedidos", "Pedido")
                        .WithMany("PedidoVinhos")
                        .HasForeignKey("IdPedido")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppVinhosFinal.Models.Vinhos", "Vinho")
                        .WithMany("PedidoVinhos")
                        .HasForeignKey("IdVinho")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pedido");

                    b.Navigation("Vinho");
                });

            modelBuilder.Entity("AppVinhosFinal.Models.Vinhos", b =>
                {
                    b.HasOne("AppVinhosFinal.Models.Quintas", "Quinta")
                        .WithMany("Vinhos")
                        .HasForeignKey("IdQuinta")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quinta");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("AppVinhosFinal.Entities.UserAccount", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("AppVinhosFinal.Entities.UserAccount", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppVinhosFinal.Entities.UserAccount", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("AppVinhosFinal.Entities.UserAccount", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AppVinhosFinal.Models.Pedidos", b =>
                {
                    b.Navigation("PedidoVinhos");
                });

            modelBuilder.Entity("AppVinhosFinal.Models.Quintas", b =>
                {
                    b.Navigation("UserAccounts");

                    b.Navigation("Vinhos");
                });

            modelBuilder.Entity("AppVinhosFinal.Models.Vinhos", b =>
                {
                    b.Navigation("PedidoVinhos");
                });
#pragma warning restore 612, 618
        }
    }
}
